{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"D",
				"DISCLAMER"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "@D:Eine Wetterstation mit dem Raspberry Pi anzapfen\n\n@T:Die kleine Wetter-Fee\n\n@V:Einige Wetterstationen liefern die Messdaten per USB an einen angeschlossenen Rechner. Mit dem Pi lassen sich die Daten dann auswerten und per Web-Anwendung ins Netz stellen.\n\n@A:Marcus Nasarek\n\n@ZKT:README\n@KL:Da in einem Raspberry Pi ein ausgewachsenes Linux steckt, sind auch Web-Anwendungen für den Heimgebrauch kein Problem. Der Artikel zeigt, wie die Daten einer Wetterstation mit Ruby ausgewertet und dann mit Hilfe eines Web-Servers präsentiert werden. \n@KE:\n\n@L:Meiner neuen Wetterstation [1] lagen nicht nur etliche Sensoren für Wind, Regen und Außentemperatur bei, sondern auch ein USB-Kabel und eine Auswerte-Software. Der erste Blick auf die Software zeigte aber, dass sie wohl in der Hülle bleiben würden. Denn zum einen setzt sie Windows voraus, zum anderen war es eine nicht sehr ansehnliche  Desktopanwendung. Ich wollte die Messdaten aber aufzeichnen und möglichst auch mit dem Handy von unterwegs bewundern. \n\n@L:Da ich nicht vorhatte, einen Windows-PC neben die Wetterstation zu stellen, der rund um die Uhr durchläuft, fiel mein zweiter Blick auf den Raspberry Pi. Der gab bis dahin mit einem kleinen Lautsprecher ein Zwergen-Mediencenter ab. Über den USB Anschluss könnte der doch die Wetterstation auslesen. Der Strombedarf ist gegenüber einem richtigen PC verschwindend gering. Und lautlos ist er auch. Nun stellte sich die Frage, wie ich per USB an die Daten komme, wenn der Station nur ein Windows-Programm beiliegt. \n\n@ZT:Zutat #1: Ein kleines C-Programm\n\n@L:Sebastian John hat ein kleines Programm te923tool [2] geschrieben, dass viele Wetterstationen auslesen kann, die auf HIDEKI basieren. Mit ein paar Abstrichen funktioniert das Programm auch für  meine TFA Nexus. Dafür muss das Programm nur auf dem Raspberry Pi compiliert werden. Damit das klappt müssen die Entwicklerwerkzeuge <C>gcc<C>, <C>make<C> und <C>libusb-dev<C> installiert sein. \n\n@L:Nach Auspacken des Programm-Archivs sollte der Aufruf von <C>make<C> dann das Programm <C>te923con<C> liefern. Ein Test mit dem Aufruf <C>te923con -h<C> liefern neben der Erkenntnis, ob das Programm läuft, eine ausführliche Hilfe zu dem Programm. Demnach liefert ein Aufruf ohne Parameter die Messdaten:\n\n@LI:\n$ <§§B>sudo ./te923con<§§B>\n1363468817:20.40:50:i:i:i:i:i:i:i:i:-1.90:60:1008.0:i:5:0:14:0.4:0.6:-3.8:115\n\n@L:Ein vorangestelltes <C>sudo<C> ist nötig, da der Zugriff auf den USB-Port root-Rechte benötigt. Was die einzelnen Werte zwischen den Doppelpunkten bedeuten, erklärt die Hilfe. Die erste Zahl jedoch wird nicht erklärt. Es die Unix-Zeit, also die Sekunden, die seit dem 1.1.1980 vergangen sind. Eine Aufruf von <C>date -d @1363468817 +%c<C> im Terminal macht daraus ein lesbares Datum: \"Sam 16 Mär 2013 22:20:17 CET\". Ein \"i\" steht für Werte, die nicht zugewiesen werden konnten.\n\n@ZT:Zutat #2: Ruby installieren\n\n@L:Ruby ist die perfekte Grundlage, um die Messdaten zu verarbeiten und einen Web-Server damit zu füttern. In den zahlreichen Bibliotheken, die sich über die ruby-Paketsverwaltung <C>gem<C> nachinstallieren lassen, ist auch die  Datenbankschnittstelle active-record und der Web-Server sinatra enthalten. Die beiden Bibliotheken machen später den Kern der Anwendung aus. Ruby kann zwar aus den System-Software-Repositories installiert werden. Aktueller und einfacher zu verwalten ist es jedoch per <C>rbenv<C>. \n\n@L:Da <C>rbenv<C> aus dem git-Repository gitHub.com installiert wird, muss vorher das Paket <C>git<C> installiert werden. Um später weitere Bibliotheken installieren zu können, sollten noch die Pakete <C>zlib1g-dev<C>, <C>libsqlite3-dev<C>, <C>libssl-dev<C> und <C>libreadline6-dev<C> nachinstalliert werden. Zur Installation von <C>rbenv<C> folgt man den Anweisungen auf der Webseite [3]. Danach kann mit <C>rbenv install 2.0.0-p0<C> die aktuelle Ruby-Version installiert werden. Der Aufruf <C>rbenv global 2.0.0-p0<C> legt diese Version als Standard fest. Ein Test mit <C>ruby -v<C> zeigt, ob die Installation geklappt hat.\n\n@ZT:Zutat #3: Eine Webanwendung mit Sinatra bauen\n\n@L:Ruby-Bibliotheken werden mit <C>gem<C> verwaltet. Um Web-Anwendungen mit Sinatra zu programmieren, wird mit <C>gem install sinatra<C> das sinatra-gem installiert. Listing 1 zeigt ein vollwertige Web-Anwendung, die nach dem starten mit <C>ruby webapp.rb<C> im Browser unter der Adresse \"http://localhost:4567\" aufgerufen werden kann.\n\n@KT:Listing 1\n@LI:§§donumber\nrequire 'sinatra'\n\nget '/' do\n  'Hello world!'\nend\n}\n@KE:\n\n@ZT:Zutat #4: Eine Datenbank mit den Messwerten füllen\n\n@L:Eine Datenbank die für einfache Zwecke oft genügt und trotzdem SQL versteht, ist Sqlite. Die Datenbank wird mit dem Debian-Paket sqlite3 geliefert. Um sie aus Ruby heraus zu verwenden, wird das Ruby-gem sqlite3 benötigt. Eine neue Datenbank <C>db.sqlite3<C>, die zum Beispiel die Temperaturwerte zu den jeweiligen Zeitpunkten aufnehmen soll, wird mit <C>sqlite3 db.db.sqlite3 'create table temperatures(zeit integer, t real);'<C> erstellt. Das Ruby-Programm in Listing 2 greift mit Hilfe von active-record auf die kleine Datenbank und füllt sie mit den Werten, die es aus einer CSV-Datei <C>wetter.csv<C> eingelesen hat. Die Zeilen in der CSV-Datei enthalten die Daten der Wetterstation und sind wie oben beschrieben aufgebaut. \n\n@L:Das Schöne an ActiveRecord ist, dass es sich automatisch um alles kümmert, was für das Lesen und Schreiben von Datenbanken notwendig ist. So erkennt es in Listing 2 an den Namen des Objekts, welche Tabelle es nehmen muss und am Namen der Variablen, in welche Spalten der Datenbanktabelle es schreiben muss. \n\n@KT:Listing 2\n@LI:§§donumber\nrequire 'csv'\nrequire 'active_record'\n\ndata = CSV.read('weather.csv', { col_sep: ':' })\nActiveRecord::Base.establish_connection({\"adapter\"=>\"sqlite3\", \n    \"database\"=>\"db.sqlite3\"})\n\nclass Temperature < ActiveRecord::Base\n      validates_uniqueness_of :zeit\nend\n\ndata.each do |d|\n  werte = { zeit: d[0], t: d[11] }\n  Temperature.create werte\nend\n\n@KE:\n\n@ZT:Zutat #5: Die Messwerte aus der Datenbank lesen\n\n@L:\n\n@KT:Listing 3\n@LI:§§donumber\nrequire 'active_record'\n\nActiveRecord::Base.establish_connection({\"adapter\"=>\"sqlite3\", \n    \"database\"=>\"db.sqlite3\"})\nclass Temperature < ActiveRecord::Base\nend\n\nwerte = Temperature.all.map {|m| [m.zeit * 1000, m.t]}\ndata = werte.inspect \nputs data\n\n@KE:\n\n@ZT:Datendiagramme in Webseiten darstellen\n\n@L:Es gibt verschiedene Wege, Diagramme aus den Daten zu erstellen und diese dann in einer Webseite einzubetten. Mit Gnuplot könnte zum Beispiel ein Skript eine Grafikdatei erzeugen, die dann als Bild in die Webseite eingebaut wird. Google-Charts liefert eine Möglichkeit, die Daten an eine Web-Schnittstelle zu übermitteln und liefert eine Bilddatei zurück. Dann braucht man keine Grafikanwendungen auf dem eigenen Webserver. Ich habe mich für eine dritte Möglichkeit entschieden und die Javascript-Bibliothek Highcharts [4] zur Erzeugung der Diagramme genutzt. Highcharts liefert sehr ansprechende Ergebnisse. Zwar kostet die Nutzung für den kommerziellen Einsatz nicht gerade wenig, die private Nutzung wird durch Highsoft Solutions AS unter \"Creative Commons Attribution-NonCommercial 3.0 License\" aber kostenfrei eingeräumt.  \n\n@L:Listing 4 zeigt ein Diagramm für den Temperaturverlauf über 24 Stunden. Alles was es dafür braucht, ist das Einbetten der beiden Javascript-Bibliotheken jQuery und Highcharts. Das eigentliche Diagramm wird als Javascript-Funktion definiert. Das einzig Besondere ist die Kennzeichnung der X-Achse als Datumswerte und die Einbettung der Datenwerte. Ein Datenwert setzt sich zusammen aus den Zeitangaben und den Temperaturwerten. Die Zeitangaben aus der Wetterstation mussten vorher mit 1000 multipilziert werden, da Javascript die Werte in Millisekunden erwartet und die Angaben ja in Sekunden vorliegen. \n\n@KT:Listing 4\n@LI:§§donumber\n<html>\n  <head>\n    <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\"></script>\n    <script src=\"http://code.highcharts.com/highcharts.js\"></script>\n    <script>\n $(function () {\n    var chart = new Highcharts.Chart({\n      chart: { renderTo: 'container' },\n      title: { text: 'Messdaten'},\n      xAxis: { type: 'datetime' },\n      yAxis: { title: { text: 'Temperatur (C)' } },\n      series: [{\n        name: \"Temperatur\",\n        data: [[1363465023000, -1.3], [1363468623000, -1.9], \n        [1363472223000, -2.5], [1363475823000, -2.5], \n        [1363479423000, -2.8], [1363483023000, -3.1], \n        [1363486623000, -3.4], [1363490223000, -3.7], \n        [1363493823000, -3.9], [1363497423000, -3.9], \n        [1363501023000, -3.3], [1363504622000, 2.0], \n        [1363508223000, 1.1], [1363511822000, 7.8], \n        [1363515422000, 5.4], [1363519022000, 4.3], \n        [1363522623000, 5.9], [1363526223000, 6.3], \n        [1363529823000, 5.2], [1363533423000, 3.8], \n        [1363537023000, 3.1], [1363540623000, 2.0], \n        [1363544223000, 1.6], [1363547823000, 1.3], \n        [1363551422000, 1.1]],\n        pointStart: 1363465023000, // Date.UTC(2010, 0, 1),\n        pointInterval: 3600 * 1000 // one hour        \n      }]\n    });\n});   \n    </script>\n  </head>\n  <body>\n    <div id=\"container\" style=\"height: 400px\"></div>\n  </body>\n</html>\n\n@KE:\n\n@ZT:Alles zusammen\n\n@L: Hinsichtlich der Rechtschreibung folgt LinuxUser der neuen deutschen Rechtschreibung nach der am 1. August 2006 in Kraft getretenen Fassung. Sofern diese verschiedene Schreibweisen zulässt, betrachten wir grundsätzlich diejenige als maßgeblich, die im Duden (Bd.1, \"Die deutsche Rechtschreibung\", 25. Aufl., 2009) durch gelbe Hinterlegung als bevorzugte Schreibweise ausgewiesen ist.\n\n@L: In einem Fachmagazin zu Themen der Computertechnik tauchen notwendigerweise auch englischsprachige Fachbegriffe auf, für die es kein angemessenes deutsches Gegenstück gibt, wie etwa Shell oder Stack. (Ja, wir kennen Begriffe wie Befehlszeilenschnittstelle oder Kellerspeicher, die sich aber aus offensichtlichen Gründen nie in der Praxis eingebürgert haben.) Dadurch sollten Sie sich aber nicht zu Denglisch verleiten lassen, also dem Spicken von Texten mit unnötigen Anglizismen. Hängen Sie im Zweifelsfall also lieber ein Laufwerk ein, als ein Volume zu mounten.\n\n@L: Hüten Sie sich vor allen Dingen vor \"false friends\" insbesondere bei den Adjektiven: So heißt performant im Deutschen soviel wie redegewandt, und weder bei granular noch granulär handelt es sich überhaupt um ein Wort aus unserer Sprache. Der Duden kennt lediglich \"granulös\", was körnig bedeutet. Wenn Sie also schnelle Rechner, leistungsfähige Programme und fein abgestufte Rechte meinen, dann schreiben Sie es besser auch so.\n\n@L: Eine besonders leidige Form der Nichtübersetzung aus dem Englischen führt zu Begriffen wie Selektion und selektieren, die -- ebenso wie die Vokabeln ausmerzen und durchführen -- zum Lieblingsjargon der Nazi-Verbrecher gehörten. In LinuxUser haben diese Begriffe deshalb nichts zu suchen. Eine Selektion haben zuletzt die Schergen an den Rampen der KZs durchgeführt, um ihre Opfer anschließend auszumerzen. Ein Linux-Anwender wählt Menüpunkte aus, nimmt eine Suche vor oder beseitigt Fehler im Code.\n\n@ZT:Befehle, Code und Navigation in grafischen Programmen\n\n@L:Steht Code mitten im Text -- etwa der Befehl <C>pinguind<C>, so drucken wir diesen in einem nichtproportionalem Font. Um dies zu kennzeichnen, kommt das Tag <C> zum Einsatz. Mit ihm fassen Sie beispielsweise auch Datei- oder Verzeichnisnamen ein.\n\n@L:Menü- oder Button-Bezeichnungen setzen wir dagegen kursiv mittels <I>. Als Trennzeichen zwischen Menüeinträgen dient das Pipe-Zeichen mit je einem Leerzeichen davor und dahinter: <I>Datei<I> | <I>Seite öffnen...<I>. Liegt ein Programm in deutscher Lokalisierung vor, verwenden Sie auch bitte die deutschen Bezeichnungen.\n\n@L:Wenn Sie von Software sprechen, bei der die Schreibweise des Namens von der der entsprechenden ausführbaren Datei abweicht, verzichten Sie bitte auf die Formatierung (Beispiel: KMail, aber <C>kmail<C>). Code-Blöcke, aber auch längere einzelne Code- und Kommandozeilen setzen Sie der besseren Übersicht wegen mittels @LI: ab:\n\n@LI:\n#!/usr/local/bin/pinguinshell\nfor pinguin in list:\n  print pinguin.id\n@L:Bitte beachten Sie, dass die Redaktion längere Codezeilen später im Spaltensatz des Layouts umbrechen muss. Daher bietet es sich hin und wieder an, auf überflüssige Leerzeichen oder Leerzeilen zu verzichten, um Platz zu sparen. Nimmt ein umbrochener Listing-Text dennoch mehr als fünf Zeilen ein, lagern Sie das Listing einfach in einen entsprechenden Kasten aus, wie in Listing 1 gezeigt.\n\n@L:Referenzieren Sie den Listing-Kasten bitte unbedingt anhand seiner Nummer, also Listing 1, denn es kann gut sein, dass das Layout ihn nicht direkt beim passenden Text, sondern zum Beispiel auf der gegenüberliegenden Seite plaziert.\n\n@KT:Listing 1\n@LI:§§nonumber\n#include <iostream.h>\n\nint main()\n{\n cout << \"Hallo, Pinguin!\" << endl;\n}\n@KE:\n@L:Bitte achten Sie bei abgesetzten oder ausgelagerten Kommandozeilenbefehlen darauf, keinen Platz mit überlangen Prompts zu schinden. Wenn Sie nur den Befehl selbst aufführen, bietet es sich außerdem an, das Kommando in den Lauftext zu ziehen: <C>find /home/pinguin -name pinguin.txt<C>.\n\n@L:Geben Sie seine Ausgabe mit an, formatieren Sie die Benutzereingabe fett. Hier hat auch ein kurzer Prompt seine Berechtigung ($ für den User-Prompt, # für den Root-Prompt):\n\n@LI:\n$ <§§B>find . -name pinguin.txt<§§B>\n./pinguin.txt\n@L:Code- oder Befehlsteile, die der Leser an seine Umgebung anpassen muss, formatieren Sie in abgesetzten oder ausgelagerten Listings bitte kursiv mittels <§§I>:\n\n@LI:\n$ find <§§I>Verzeichnis<§§I> -name <§§I>Dateiname<§§I>\n@L:Mit der zusätzlichen Angabe §§nonumber unterdrücken Sie das Nummerieren der Listing-Zeilen. Im Regelfall benötigen Sie keine Zeilennummern, da das Layout die Zeilen in einem Kasten farblich von einander absetzt.\n\n@L:Möchten Sie jedoch die Zeilen im Text explizit referenzieren, verwenden Sie statt §§nonumber das Prefix §§donumber. Beim Konvertieren des Textes im weiteren Workflow innerhalb der Redaktion erhalten die Zeilen dann automatisch Nummer. Sie brauchen diese nicht einzugeben.\n\n@L:Bitte beachten Sie: Ein Abschnitt -- also der Bereich zwischen zwei Zwischenüberschriften (@ZT:) -- kann aus layouttechnischen Gründen nie mit einem abgesetzten Listing (@LI:) enden. Nach diesem muss vor der nächsten Zwischenüberschrift mindestens noch ein Absatz (@L:) mit wenigstens 80 Zeichen -- das entspricht gedruckt drei Zeilen - folgen.\n\n@ZT:Tastenkürzel\n\n@L:Anders als Befehle im Fließtext schreiben wir Tastenkürzel nicht kursiv, sondern in eckigen Klammern: So symbolisiert [Alt]+[F4], dass der Anwender gleichzeitig die Taste [Alt] und die Funktionstaste [F4] drücken soll. Die gleichzeitig zu betätigenden Tasten verbindet ein Pluszeichen. Kommen Tasten nacheinander (nicht gleichzeitig) zur Anwendung, machen LinuxUser-Artikel das wie folgt deutlich: [Alt],[T].\n\n@L:Da die Mehrzahl unserer Leserschaft deutsche Keyboards verwendet, heißt die Control-Taste bei uns [Strg], die Insert-Taste [Einfg], die Shift-Taste [Umschalt] und die Return-Taste [Eingabe]. Die Taste mit dem seltsamen Fenster-Zeichen darauf heißt übrigens [Super].\n\n@L:Die Tasten werden stets so angegeben, wie sie beschriftet sind: Ein Druck auf [A] produziert ein \"a\", für ein \"A\" gilt es [Umschalt]+[A] zu drücken. Das gilt auch für Symbole -- ein Fragezeichen \"?\" entspricht [Umschalt]+[ß], ein Backslash \"\\\" entsteht per [AltGr][ß].\n\n@ZT:Glossareinträge\n\n@L:Damit die Texte im LinuxUser nicht mit Erläterungen überladen sind, bietet das Layout die Möglichkeit, diese in einen <S>Glossareintrag<S> auszulagern. Diese erscheinen dann im fertigen Heft in der <S>Marginalspalte<S> in der Nähe des referenzierten Begriffs.\n\n@S:<S>Glossareintrag:<S> Glossareinträge stehen in Ihrem Text optimalerweise nach dem Absatz, in dem Sie etwas erläutern möchten. Sie sollen ein Aha-Erlebnis auslösen, damit es im Lesefluss weitergeht, wenn jemand beim Lesen über das Wort stolpert. Das @S: leitet einen solchen Absatz ein. Darauf folgt gleich der in <S> eingeschlossene Begriff inklusive Doppelpunkt. Übrigens, nicht nur Wörter und Wortgruppen, sondern auch Befehle und -- wenn nötig -- darf sogar nur eine einzelne Option, ein einzelnes Zeichen einen eigenen Eintrag bekommen.\n\n@S:<S>Marginalspalte:<S> Der Fachbgeriff für den schmalen Rand, der sich außerhalb der Textspalten befindet. Im LinuxUser stehen in der Marginalspalte häfig Glossareinträge, Bildunterschriften oder auch das Readme am Anfang des Artikels.\n\n@ZT:Listen\n\n@L:Setzen Sie Listen bitte mit Bedacht ein. Oftmals zeigt sich, dass ein ausformulierter Text besser für das Verständnis ist. Manchmal sorgen Auflistungen jedoch für Transparenz. Verwenden Sie dann einfach einen *, um die einzelnen Listeneinträge zu trennen. Dieser steht immer am Anfang einer Zeile, und nach einem Listeneintrag folgt eine Leerzeile:\n\n@L:* Erster Punkt\n\n@L:* Zweiter Punkt\n\n@L:* Letzter Punkt\n\n@L:Ein Abschnitt -- also der Bereich zwischen zwei Zwischenüberschriften (@ZT:) -- kann aus layouttechnischen Gründen nie mit einer Aufzählung enden. Nach dieser muss vor der nächsten Zwischenüberschrift mindestens noch ein Absatz (@L:) mit wenigstens 80 Zeichen -- das entspricht gedruckt drei Zeilen - folgen.\n\n@ZT:Abbildungen\n\n@L:Wenn möglich sollte jede Seite Ihres Artikels mindestens ein Bild enthalten, um eine ermüdende Bleiwüsten zu vermeiden. Bei den Abbildungen handelt es sich jedoch nicht einfach nur um schmückendes Beiwerk: Genau wie der Text selbst übermittelt ein Bild eine Information - wenn nicht, lassen Sie es getrost weg. Sie finden sicher ein anderes, das mehr sagt als tausend Worte.\n\n@L:Im folgenden sehen Sie, wie Sie Bilder in den Text integrieren. Beachten Sie bitte, dass Abbildungen genau wie Listing-Kästen fließende Objekte sind, die im Layout garantiert nicht direkt vor oder nach dem bezugnehmenden Text zu stehen kommen. Deshalb müssen Sie Bilder im Text referenzieren (Abbildung 1). Dabei kürzen Sie das Wort \"Abbildung\" anders als in der Bildunterschrift nicht ab.\n\n@BI:b01-abbildung.png\n\n@B:Abb. 1: Denken Sie sich für die Bildunterschrift einen Satz aus, der eine zusätzliche Information gibt oder einen wichtigen Aspekt der Abbildung beschreibt.\n\n@L:Bitte liefern Sie Abbildungen (für Screenshots grundsätzlich PNG, JPG (nur) für Fotos, Xfig- oder Postscript-Dateien für grafische Darstellungen) immer so hoch aufgelöst wie möglich mit.\n\n@ZT:Tabellen zur Abwechslung\n\n@L:Tabellen eignen sich für Vergleiche bei Tests oder als bewusst als Leserservice gedachte Mini-Nachschlagewerke. Auch diese müssen Sie im Text referenzieren, und zwar durch die Tabellenüberschrift (siehe Tabelle \"Escape-Sequenzen\"). Tabellen bekommen keine fortlaufenden Nummern. Beachten Sie bei der Formatierung bitte das Beispiel in der Tabelle \"Escape-Sequenzen\".\n\n@TT:Escape-Sequenzen\n@TH:Sequenz Funktion\n@TL:\\a  Klingelton\n@TL:\\b  Backspace\n@TL:\\f  Formfeed\n@TZT:Tabellenzwischentitel\n@TL:\\n  Newline\n@TL:\\r  Return\n@TL:\\t  Tabulator\n@TL:\\v  Vertikaltabulator\n@TE:\n@L:Als Feldtrenner innerhalb der Tabelle fungiert der Tabulator. Größere Tabellen erstellen Sie zweckmäßigerweise in einer Tabellenkalkulation wie OOo Calc und exportieren sie dann als durch Tabs separiertes CSV. Wie Sie sehen, steht Ihnen mit dem Absatz-Tag @TZT: in ein Weg offen, die Zeilen Ihrer Tabelle zu gliedern oder am Ende eine durchgehende Zeile für Erläterungen einzufügen. In manchen Fällen - vor allem bei Tests - stehen Bilder in Tabellenzellen. Diese binden Sie mit dem Tag <BI> ein. Beispiel: @TL:<BI>abb.png<BI>\n\n@ZT:Spezialfälle\n\n@L:Wollen Sie dem betreuenden Redakteur eine Textpassage erläutern, verwenden Sie für den folgenden Absatz das Tag @#:. Wie in vielen Programmiersprachen dient das Hash-Tag dem Einfügen von Notizen, die später auf jeden Fall nicht in der Ausgabe erscheinen.\n\n@L:Legen Sie bei Begriffen, die sich aus mehren Wörtern zusammensetzen, Wert darauf, dass diese zusammen in einer Zeile stehen, so zeigen Sie dies mit einem geschützten Leerzeichen an. Ein Beispiel zeigt, wie Sie dies in Ihrem Artikeltext umsetzen: Red**Hat. Die Redaktion behät sich aber vor, sich über diese Angabe hinwegzusetzen.\n\n@L:Bei Zahlen über Eintausend teilt ein kleiner Leeraum die Zahl in Dreiergruppen. Sie können diesen selber einfügen; ein Beispiel zeigt, wie es geht: 25:*000. Gedankenstriche schreiben Sie bitte als Doppelminus.\n\n@L:Im Lauftext verwenden wir normalerweise keine Hochzahlen. Sie kommen aber hin und wieder in Tabellen zum Einsatz, um zu einem Punkt noch eine zusätzliche Erläterung zu liefern. Schließen Sie mit dem Tag <+> ein Zeichen ein, dann erscheint es später im Text hochgestellt. Wollen Sie dagegen ein Zeichen tieferstellen, dann verwenden Sie die folgende Notation: S<->0<->.\n\n@ZT:Kästen und Infos\n\n@L:Nun fehlen lediglich noch die Literaturangaben: Ein kleiner Kasten mit der Überschrift \"Infos\", der URLs oder Verweise auf bereits veröffentlichte Artikel zum selben (oder verwandten) Thema aufführt.\n\n@L:Guter Service an den Lesern und Leserinnen äußert sich unter anderem auch darin, dass man nach dem Copy & Paste aus dem Browser alle unnötigen URL-Elemente (zum Beispiel überflüssige Angaben (index.html oder Session-IDs) herauslöscht. Ansonsten gilt für Referenzen wie bei Abbildungen: Alle diese Einträge [1] müssen im Text referenziert [2,3] werden.\n\n@L:Übrigens: Ausführungen zu Themen, die im Artikeltext selbst zu weit führen, aber dennoch im Zusammenhang höchst interessant sind, lagert man am besten in Textkästen aus. Auch längliche Installationsbeschreibungen (die immer für mindestens zwei Distributionen dabei sein sollten, sobald <C>rpm -i<C>/<C>yast -i<C>, <C>apt-get install<C> oder <C>configure;make;make install<C> in Reinform nicht vollkommen glatt durchlaufen) sind besser im externen Kasten aufgehoben, um die Leser nicht zu langweilen.\n\n@L:Solche Textkästen sehen formal aus wie der Infokasten, tragen aber statt der Überschrift \"Infos\" eine beschreibende Überschrift, wie das Beispiel Kasten \"Wie lang ist mein Artikel\" zeigt. Außerdem dient als Absatztrenner in solchen Textkästen nicht @L: sondern @KL:. Kästen nummerieren Sie - anders als Listings - nicht durch. Sie referenzieren sie im Text vielmehr anhand ihrer Überschrift.\n\n@KT:Wie lang ist mein Artikel?\n@KL:Die Frage nach der endgültigen Länge eines Artikels zählt zu den ganz großen Geheimnissen der Schreibekunst. Sie hängt nämlich nicht nur davon ab, wie lang Ihr Text ist, sondern auch davon, wieviele Abbildungen er enthält und wie groß diese im Layout ausfallen. Während eine vertikale Werkzeugleiste vielleicht maximal einen Zentimeter breit läft, nimmt der gesamte Desktop-Inhalt vielleicht anderthalb Spalten ein.\n\n@KL:Zudem wirkt sich das Aufmacherbild am Anfang eines Artikels bei kürzeren Artikeln stärker aus. Bei einen Zweiseiter mit fünf Abbildungen plus Aufmacher passen vielleicht gerade einmal 4000 Zeichen auf eine Seite. Bei einem Fünfseiter kann es bei gleicher Anzahl Abbildungen pro Seite schon wesentlich mehr Text sein.\n\n@KL:Schauen sich deren Dateigröße in Byte an. Teilen Sie diese Zahl durch die Anzahl geplanter Seiten. Das Ergebnis sollte zwischen 4000 und 4250 (bei sehr vielen Abbildungen und tendenziell kurzen Artikeln) liegen. Prinzipiell schadet es nie, wenn die Textdatei am Ende ein klein wenig größer (etwa 2000 Bytes) ausfällt, als das berechnete Optimum: Kürzen fällt der Redaktion in der Regel leichter als längen.\n\n@KE:\n\n@ZT:Sachdienliche Hinweise\n\n@L:Damit haben Sie bereits fast alle Formatierungsmöglichkeiten für LinuxUser-Artikel beisammen. Bitte erfinden Sie keine neuen hinzu oder zweckentfremden Sie vorhandene nicht. Ob Tags zum Erzwingen von Zeilenumbrüchen oder ähnliche eigenmächtige Abweichungen - bevor der Artikel in den Satz geht, müssen sie in jedem Fall wieder entfernt werden, doppelte Arbeit also.\n\n@L:Wenn Sie sich nicht sicher sind, wie Sie an einer bestimmten Stelle formatieren sollen, fragen Sie bitte den Redakteur, mit dem Sie Ihren Artikel abgestimmt haben.\n\n@L:Ganz am Schluss steht die gute alte Autorenbox, die bei Autorinnen selbstverständlich die Überschrift \"Die Autorin\" trägt. Hier besteht die Möglichkeit, etwas Informatives oder Lustiges über sich selbst zu schreiben. Aber bitte kein Bewerbungsschreiben!\n\n@IT:Infos\n@IL:[1] TFA Wetterstation Nexus: <U>http://tfa-dostmann.de/index.php?id=62<U>\n\n@IL:[2] te93tool: <U>http://te923.fukz.org/<U>\n\n@IL:[3] rbenv: <U>https://github.com/sstephenson/rbenv<U>\n\n@IL:[4] Highcharts: <U>http://www.highcharts.com/<U>\n\n@IE:\n@IT:Der Autor\n@IL:Marcus Nasarek ist Security Professional und schwer begeistert von Shells und Scriptsprachen.\n\n@IE:\n",
			"file": "/home/nasarek/Dokumente/Wetter-Fee/Wetter-Fee.txt",
			"file_size": 24956,
			"file_write_time": 1363557698000000,
			"settings":
			{
				"buffer_size": 24669,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Rakefile",
			"settings":
			{
				"buffer_size": 2179,
				"line_ending": "Unix"
			}
		},
		{
			"file": "web/controllers/web_dash_controller.rb",
			"settings":
			{
				"buffer_size": 2757,
				"line_ending": "Unix"
			}
		},
		{
			"file": "web/views/temperature_line.js.erb",
			"settings":
			{
				"buffer_size": 4284,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 72.0,
		"selected_items":
		[
		],
		"width": 392.0
	},
	"console":
	{
		"height": 0.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/nasarek/source/highcharts/dia.html",
		"/home/nasarek/source/sqlite3/weather.rb",
		"/home/nasarek/source/rnexus/db/migrate/20121229222340_create_measurements.rb",
		"/home/nasarek/source/rnexus/bin/rnexus",
		"/home/nasarek/source/rnexus/LICENSE.TXT",
		"/home/nasarek/source/rnexus/README.md",
		"/home/nasarek/source/rnexus/Rakefile",
		"/home/nasarek/Dokumente/Wetter-Fee/Wetter-Fee.txt",
		"/home/nasarek/source/rnexus/te923tool-0.5/README",
		"/home/nasarek/source/rnexus/data/weatherAll.data",
		"/home/nasarek/source/rnexus/script/cron/cron.hourly/load-weather-data",
		"/home/nasarek/source/rnexus/.gitignore",
		"/home/nasarek/source/rnexus/TODOS.TXT",
		"/home/nasarek/source/rnexus/web/controllers/application_controller.rb",
		"/home/nasarek/source/rnexus/web/controllers/web_dash_controller.rb",
		"/home/nasarek/source/rnexus/web/config.ru",
		"/home/nasarek/source/rnexus/web/controllers/application_helper.rb",
		"/home/nasarek/source/rnexus/web/views/not_found.haml",
		"/home/nasarek/.config/sublime-text-2/Packages/Default/Preferences.sublime-settings",
		"/home/nasarek/source/rnexus/web/controller/web_rnexus.rb",
		"/home/nasarek/source/rnexus/web/run_weather_dash.rb",
		"/home/nasarek/source/rnexus/lib/rnexus/web_rnexus.rb",
		"/home/nasarek/source/rnexus/web/development_config.yml",
		"/home/nasarek/source/rnexus/lib/rnexus.rb",
		"/home/nasarek/source/rnexus/web/web_rnexus.rb",
		"/home/nasarek/source/rnexus/web/temperature_line.js.erb",
		"/home/nasarek/source/rnexus/web/wind_polar.js.erb"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"space",
			"\n"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/nasarek/Dokumente/Wetter-Fee/Wetter-Fee.txt",
					"settings":
					{
						"buffer_size": 24669,
						"regions":
						{
						},
						"selection":
						[
							[
								24669,
								24669
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Rakefile",
					"settings":
					{
						"buffer_size": 2179,
						"regions":
						{
						},
						"selection":
						[
							[
								1058,
								1058
							]
						],
						"settings":
						{
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 720.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "web/controllers/web_dash_controller.rb",
					"settings":
					{
						"buffer_size": 2757,
						"regions":
						{
						},
						"selection":
						[
							[
								590,
								590
							]
						],
						"settings":
						{
							"syntax": "Packages/Ruby/Ruby.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "web/views/temperature_line.js.erb",
					"settings":
					{
						"buffer_size": 4284,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Rails/JavaScript (Rails).tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1305.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 198.0,
	"status_bar_visible": true
}
